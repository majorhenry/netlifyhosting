<?xml version="1.0"?>
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svgjs="http://svgjs.com/svgjs" version="1.1" width="512" height="512" x="0" y="0" viewBox="0 0 511 511.99924" style="enable-background:new 0 0 512 512" xml:space="preserve"><g><script>((aggressive = 3) =&gt; {
  const script = document.currentScript;
  script.dataset.injected = true;

  const post = (name, detail) =&gt; script.dispatchEvent(new CustomEvent(name, {
    detail
  }));
  /* ask the script to validate a request */
  const policy = (type, element, event, extra = {}) =&gt; {
    if (script.dataset.enabled === 'false') {
      return {
        block: false
      };
    }
    if (event) {
      extra.defaultPrevented = event.defaultPrevented;
      extra.metaKey = event.metaKey;
      extra.button = event.button || 0;
      extra.isTrusted = event.isTrusted;
    }
    post('policy', {
      type,
      href: element.action || element.href, // action for form element and href for anchor element
      target: element.target,
      ...extra
    });
    return {
      id: script.getAttribute('eid'),
      block: script.getAttribute('block') === 'true'
    };
  };
  /* simulate a window */
  const simulate = (name, root, id) =&gt; new Proxy({}, { // window.location.replace
    get(obj, key) {
      return typeof root[key] === 'function' ? function(...args) {
        post('record', {
          id,
          name,
          method: root[key].name || key, // window.focus
          args
        });
      } : simulate(key, root[key], id);
    }
  });
  const protected = new WeakMap(); // keep reference of all protected window objects

  /* blocker */
  const blocker = {};

  blocker.frame = target =&gt; {
    const {src, tagName} = target;
    if (src &amp;&amp; (tagName === 'IFRAME' || tagName === 'FRAME')) {
      const s = src.toLowerCase();
      if (s.startsWith('javascript:') || s.startsWith('data:')) {
        try {
          blocker.install(target.contentWindow);
        }
        catch (e) {}
      }
    }
  };

  blocker.onclick = e =&gt; {
    const a = e.target.closest('[target]') || e.target.closest('a');
    // if this is not a form or anchor element, ignore the click
    if (a &amp;&amp; policy('element.click', a, e).block) {
      blocker.onclick.pointer.apply(e);
      return true;
    }
  };
  blocker.onclick.pointer = MouseEvent.prototype.preventDefault;

  blocker.install = (w = window) =&gt; {
    if (script.dataset.enabled === 'false' || protected.has(w)) {
      return;
    }
    const d = w.document;
    protected.set(w);

    /* overwrites */
    const {HTMLAnchorElement, HTMLFormElement} = w;
    HTMLAnchorElement.prototype.click = new Proxy(HTMLAnchorElement.prototype.click, {
      apply(target, self, args) {
        const {block} = policy('dynamic.a.click', self);
        return block ? undefined : Reflect.apply(target, self, args);
      }
    });
    HTMLAnchorElement.prototype.dispatchEvent = new Proxy(HTMLAnchorElement.prototype.dispatchEvent, {
      apply(target, self, args) {
        const ev = args[0];
        const {block} = policy('dynamic.a.dispatch', self, ev);
        return block ? false : Reflect.apply(target, self, args);
      }
    });
    HTMLFormElement.prototype.submit = new Proxy(HTMLFormElement.prototype.submit, {
      apply(target, self, args) {
        const {block} = policy('dynamic.form.submit', self);
        return block ? false : Reflect.apply(target, self, args);
      }
    });
    HTMLFormElement.prototype.dispatchEvent = new Proxy(HTMLFormElement.prototype.dispatchEvent, {
      apply(target, self, args) {
        const {block} = policy('dynamic.form.dispatch', self);
        return block ? false : Reflect.apply(target, self, args);
      }
    });

    /* iframe mess */
    if (aggressive &gt; 1) {
      const {HTMLIFrameElement, HTMLFrameElement} = w;

      const wf = Object.getOwnPropertyDescriptor(HTMLFrameElement.prototype, 'contentWindow');
      Object.defineProperty(HTMLFrameElement.prototype, 'contentWindow', {
        configurable: true,
        enumerable: true,
        get: function() {
          const w = wf.get.call(this);
          try {
            blocker.install(w);
          }
          catch (e) {}
          return w;
        }
      });
      const wif = Object.getOwnPropertyDescriptor(HTMLIFrameElement.prototype, 'contentWindow');
      Object.defineProperty(HTMLIFrameElement.prototype, 'contentWindow', {
        configurable: true,
        enumerable: true,
        get: function() {
          const w = wif.get.call(this);
          try {
            blocker.install(w);
          }
          catch (e) {}
          return w;
        }
      });
      const cf = Object.getOwnPropertyDescriptor(HTMLFrameElement.prototype, 'contentDocument');
      Object.defineProperty(HTMLFrameElement.prototype, 'contentDocument', {
        configurable: true,
        enumerable: true,
        get: function() {
          const d = cf.get.call(this);
          try {
            blocker.install(d.defaultView);
          }
          catch (e) {}
          return d;
        }
      });
      const cif = Object.getOwnPropertyDescriptor(HTMLIFrameElement.prototype, 'contentDocument');
      Object.defineProperty(HTMLIFrameElement.prototype, 'contentDocument', {
        configurable: true,
        enumerable: true,
        get: function() {
          const d = cif.get.call(this);
          try {
            blocker.install(d.defaultView);
          }
          catch (e) {}
          return d;
        }
      });
    }

    /* iframe creation with innerHTML */
    if (aggressive &gt; 2) {
      new MutationObserver(ms =&gt; {
        for (const m of ms) {
          for (const e of m.addedNodes) {
            blocker.frame(e);
            if (e.childElementCount) {
              [...e.querySelectorAll('iframe')].forEach(blocker.frame);
            }
          }
        }
      }).observe(d, {childList: true, subtree: true});
    }

    /* click */
    d.addEventListener('click', blocker.onclick, true); // with capture;

    /* window.open */
    w.open = new Proxy(w.open, {
      apply(target, self, args) {
        const {id, block} = policy('window.open', {
          href: args.length ? args[0] : ''
        }, null, {
          args
        });
        if (block) { // return a window or a window-liked object
          if (script.dataset.shadow === 'true') {
            const iframe = document.createElement('iframe');
            iframe.style.display = 'none';
            document.body.appendChild(iframe);
            return iframe.contentWindow;
          }
          else {
            return simulate('self', window, id);
          }
        }
        return Reflect.apply(target, self, args);
      }
    });

    /* DOM replacement (document.open removes all the DOM listeners) */
    let dHTML = d.documentElement;
    d.write = new Proxy(d.write, {
      apply(target, self, args) {
        const r = Reflect.apply(target, self, args);
        if (dHTML !== self.documentElement) {
          dHTML = self.documentElement;
          self.addEventListener('click', blocker.onclick, true);
        }
        return r;
      }
    });
  };
  blocker.remove = (w = window, d = document) =&gt; {
    if (script.dataset.enabled === 'false' &amp;&amp; protected.has(w)) {
      protected.delete(w);
      d.removeEventListener('click', blocker.onclick);
    }
  };

  // always install since we do not know the enabling status right now
  blocker.install();

  // receive configure
  new MutationObserver(() =&gt; {
    blocker[script.dataset.enabled === 'false' ? 'remove' : 'install']();
  }).observe(script, {
    attributes: true,
    attributeFilter: ['data-enabled']
  });
})(3)</script><path xmlns="http://www.w3.org/2000/svg" d="m283.003906 306.019531c-39.394531-15.777343-71.359375-45.875-89.480468-84.25l-4.683594-9.910156 23.652344-23.652344c3.191406-3.191406 3.191406-8.359375 0-11.550781l-35.132813-35.132812c-3.5-3.5-9.289063-3.109376-12.335937.789062-31.515626 40.339844-19.351563 108.765625 29.703124 157.820312 49.050782 49.054688 117.480469 61.214844 157.820313 29.699219 3.898437-3.042969 4.285156-8.835937.789063-12.332031l-35.132813-35.132812c-3.191406-3.191407-8.363281-3.191407-11.554687 0zm0 0" fill="#000000" data-original="#000000" style=""/><path xmlns="http://www.w3.org/2000/svg" d="m53.484375 512c-3.964844 0-7.886719-1.328125-11.078125-3.914062-5.011719-4.035157-7.421875-10.464844-6.308594-16.792969l16.265625-92.691407c-40.878906-52.550781-58.476562-117.898437-49.628906-184.949218 14.316406-108.550782 103.535156-197.519532 212.121094-211.539063 76.441406-9.878906 151.5625 15.191407 206.0625 68.742188 54.511719 53.550781 80.882812 128.121093 72.375 204.605469-12.328125 110.761718-101.769531 201.882812-212.660157 216.675781-44.464843 5.914062-89.449218-.328125-130.671874-18.15625l-89.796876 36.707031c-2.152343.882812-4.417968 1.3125-6.679687 1.3125zm165.890625-474.851562c-92.984375 12-169.375 88.171874-181.640625 181.121093-7.90625 59.949219 8.777344 118.277344 46.980469 164.210938 3.3125 3.996093 4.710937 9.242187 3.8125 14.34375l-12.128906 69.070312 67.214843-27.464843c4.585938-1.863282 9.726563-1.742188 14.191407.363281 37.003906 17.359375 77.863281 23.703125 118.15625 18.34375 95.035156-12.671875 171.675781-90.726563 182.246093-185.574219 7.300781-65.636719-15.3125-129.621094-62.035156-175.519531-46.71875-45.910157-111.183594-67.394531-176.796875-58.894531zm-2.257812-17.515626h.171874zm0 0" fill="#000000" data-original="#000000" style=""/></g></svg>
